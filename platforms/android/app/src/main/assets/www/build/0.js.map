{"version":3,"sources":["../../src/pages/signup/signup.module.ts","../../node_modules/@ionic-native/http/index.js","../../src/pages/signup/signup.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACa;AACN;AACN;AAEJ;AActC;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAZ5B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAU;aACX;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,2DAAU,CAAC;gBACpC,4EAAe,CAAC,QAAQ,EAAE;aAC3B;YACD,OAAO,EAAE;gBACP,2DAAU;aACX,EAAC,SAAS,EAAC,CAAC,gEAAI,CAAC;SACnB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;ACnB7B;AAAA;AAAA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AAC2C;AAC6B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,wBAAwB,OAAO;AAC/B,iBAAiB,OAAO,uEAAuE;AAC/F;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,mBAAmB,OAAO,uEAAuE;AACjG;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,mBAAmB,OAAO,uEAAuE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC;AACA,mCAAmC;AACnC;AACA;AACA,oBAAoB,OAAO;AAC3B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,sBAAsB,OAAO;AAC7B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B,wBAAwB,OAAO;AAC/B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B,wBAAwB,OAAO;AAC/B,uBAAuB,OAAO;AAC9B;AACA,oCAAoC;AACpC;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA,2BAA2B;AAC3B;AACA;AACA,mBAAmB,OAAO;AAC1B,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,wBAAwB,OAAO;AAC/B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wBAAwB;AACxB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { HTTP } from '@ionic-native/http';\n\nimport { SignupPage } from './signup';\n\n@NgModule({\n  declarations: [\n    SignupPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SignupPage),\n    TranslateModule.forChild()\n  ],\n  exports: [\n    SignupPage\n  ],providers:[HTTP]\n})\nexport class SignupPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.module.ts","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n/**\n * @name HTTP\n * @description\n * Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.\n *\n * Advantages over Javascript requests:\n * - Background threading - all requests are done in a background thread\n * - SSL Pinning\n *\n * @usage\n * ```typescript\n * import { HTTP } from '@ionic-native/http';\n *\n * constructor(private http: HTTP) {}\n *\n * ...\n *\n * this.http.get('http://ionic.io', {}, {})\n *   .then(data => {\n *\n *     console.log(data.status);\n *     console.log(data.data); // data received by server\n *     console.log(data.headers);\n *\n *   })\n *   .catch(error => {\n *\n *     console.log(error.status);\n *     console.log(error.error); // error message as string\n *     console.log(error.headers);\n *\n *   });\n *\n * ```\n * @interfaces\n * HTTPResponse\n */\nvar HTTP = (function (_super) {\n    __extends(HTTP, _super);\n    function HTTP() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * This returns an object representing a basic HTTP Authorization header of the form.\n     * @param username {string} Username\n     * @param password {string} Password\n     * @returns {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64EncodedUsernameAndPassword'}\n     */\n    /**\n       * This returns an object representing a basic HTTP Authorization header of the form.\n       * @param username {string} Username\n       * @param password {string} Password\n       * @returns {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64EncodedUsernameAndPassword'}\n       */\n    HTTP.prototype.getBasicAuthHeader = /**\n       * This returns an object representing a basic HTTP Authorization header of the form.\n       * @param username {string} Username\n       * @param password {string} Password\n       * @returns {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64EncodedUsernameAndPassword'}\n       */\n    function (username, password) {\n        return;\n    };\n    /**\n     * This sets up all future requests to use Basic HTTP authentication with the given username and password.\n     * @param username {string} Username\n     * @param password {string} Password\n     */\n    /**\n       * This sets up all future requests to use Basic HTTP authentication with the given username and password.\n       * @param username {string} Username\n       * @param password {string} Password\n       */\n    HTTP.prototype.useBasicAuth = /**\n       * This sets up all future requests to use Basic HTTP authentication with the given username and password.\n       * @param username {string} Username\n       * @param password {string} Password\n       */\n    function (username, password) { };\n    /**\n     * Get all headers defined for a given hostname.\n     * @param host {string} The hostname\n     * @returns {string} return all headers defined for the hostname\n     */\n    /**\n       * Get all headers defined for a given hostname.\n       * @param host {string} The hostname\n       * @returns {string} return all headers defined for the hostname\n       */\n    HTTP.prototype.getHeaders = /**\n       * Get all headers defined for a given hostname.\n       * @param host {string} The hostname\n       * @returns {string} return all headers defined for the hostname\n       */\n    function (host) {\n        return;\n    };\n    /**\n     * Set a header for all future requests. Takes a hostname, a header and a value.\n     * @param host {string} The hostname to be used for scoping this header\n     * @param header {string} The name of the header\n     * @param value {string} The value of the header\n     */\n    /**\n       * Set a header for all future requests. Takes a hostname, a header and a value.\n       * @param host {string} The hostname to be used for scoping this header\n       * @param header {string} The name of the header\n       * @param value {string} The value of the header\n       */\n    HTTP.prototype.setHeader = /**\n       * Set a header for all future requests. Takes a hostname, a header and a value.\n       * @param host {string} The hostname to be used for scoping this header\n       * @param header {string} The name of the header\n       * @param value {string} The value of the header\n       */\n    function (host, header, value) { };\n    /**\n     * Get the name of the data serializer which will be used for all future POST and PUT requests.\n     * @returns {string} returns the name of the configured data serializer\n     */\n    /**\n       * Get the name of the data serializer which will be used for all future POST and PUT requests.\n       * @returns {string} returns the name of the configured data serializer\n       */\n    HTTP.prototype.getDataSerializer = /**\n       * Get the name of the data serializer which will be used for all future POST and PUT requests.\n       * @returns {string} returns the name of the configured data serializer\n       */\n    function () {\n        return;\n    };\n    /**\n     * Set the data serializer which will be used for all future POST and PUT requests. Takes a string representing the name of the serializer.\n     * @param serializer {string} The name of the serializer. Can be urlencoded, utf8 or json\n     */\n    /**\n       * Set the data serializer which will be used for all future POST and PUT requests. Takes a string representing the name of the serializer.\n       * @param serializer {string} The name of the serializer. Can be urlencoded, utf8 or json\n       */\n    HTTP.prototype.setDataSerializer = /**\n       * Set the data serializer which will be used for all future POST and PUT requests. Takes a string representing the name of the serializer.\n       * @param serializer {string} The name of the serializer. Can be urlencoded, utf8 or json\n       */\n    function (serializer) { };\n    /**\n     * Add a custom cookie.\n     * @param url {string} Scope of the cookie\n     * @param cookie {string} RFC compliant cookie string\n     */\n    /**\n       * Add a custom cookie.\n       * @param url {string} Scope of the cookie\n       * @param cookie {string} RFC compliant cookie string\n       */\n    HTTP.prototype.setCookie = /**\n       * Add a custom cookie.\n       * @param url {string} Scope of the cookie\n       * @param cookie {string} RFC compliant cookie string\n       */\n    function (url, cookie) { };\n    /**\n     * Clear all cookies.\n     */\n    /**\n       * Clear all cookies.\n       */\n    HTTP.prototype.clearCookies = /**\n       * Clear all cookies.\n       */\n    function () { };\n    /**\n     * Remove cookies for given URL.\n     * @param url {string}\n     * @param cb\n     */\n    /**\n       * Remove cookies for given URL.\n       * @param url {string}\n       * @param cb\n       */\n    HTTP.prototype.removeCookies = /**\n       * Remove cookies for given URL.\n       * @param url {string}\n       * @param cb\n       */\n    function (url, cb) { };\n    /**\n     * Resolve cookie string for given URL.\n     * @param url {string}\n     */\n    /**\n       * Resolve cookie string for given URL.\n       * @param url {string}\n       */\n    HTTP.prototype.getCookieString = /**\n       * Resolve cookie string for given URL.\n       * @param url {string}\n       */\n    function (url) {\n        return;\n    };\n    /**\n     * Get global request timeout value in seconds.\n     * @returns {number} returns the global request timeout value\n     */\n    /**\n       * Get global request timeout value in seconds.\n       * @returns {number} returns the global request timeout value\n       */\n    HTTP.prototype.getRequestTimeout = /**\n       * Get global request timeout value in seconds.\n       * @returns {number} returns the global request timeout value\n       */\n    function () {\n        return;\n    };\n    /**\n     * Set global request timeout value in seconds.\n     * @param timeout {number} The timeout in seconds. Default 60\n     */\n    /**\n       * Set global request timeout value in seconds.\n       * @param timeout {number} The timeout in seconds. Default 60\n       */\n    HTTP.prototype.setRequestTimeout = /**\n       * Set global request timeout value in seconds.\n       * @param timeout {number} The timeout in seconds. Default 60\n       */\n    function (timeout) { };\n    /**\n     * Set SSL Cert handling mode, being one of the following values\n     * default: default SSL cert handling using system's CA certs\n     * nocheck: disable SSL cert checking, trusting all certs (meant to be used only for testing purposes)\n     * pinned: trust only provided certs\n     * @see https://github.com/silkimen/cordova-plugin-advanced-http#setsslcertmode\n     * @param {'default' | 'nocheck' | 'pinned'} mode SSL Cert handling mode\n     */\n    /**\n       * Set SSL Cert handling mode, being one of the following values\n       * default: default SSL cert handling using system's CA certs\n       * nocheck: disable SSL cert checking, trusting all certs (meant to be used only for testing purposes)\n       * pinned: trust only provided certs\n       * @see https://github.com/silkimen/cordova-plugin-advanced-http#setsslcertmode\n       * @param {'default' | 'nocheck' | 'pinned'} mode SSL Cert handling mode\n       */\n    HTTP.prototype.setSSLCertMode = /**\n       * Set SSL Cert handling mode, being one of the following values\n       * default: default SSL cert handling using system's CA certs\n       * nocheck: disable SSL cert checking, trusting all certs (meant to be used only for testing purposes)\n       * pinned: trust only provided certs\n       * @see https://github.com/silkimen/cordova-plugin-advanced-http#setsslcertmode\n       * @param {'default' | 'nocheck' | 'pinned'} mode SSL Cert handling mode\n       */\n    function (mode) {\n        return;\n    };\n    /**\n     * Disable following redirects automatically.\n     * @param disable {boolean} Set to true to disable following redirects automatically\n     * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure\n     */\n    /**\n       * Disable following redirects automatically.\n       * @param disable {boolean} Set to true to disable following redirects automatically\n       * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure\n       */\n    HTTP.prototype.disableRedirect = /**\n       * Disable following redirects automatically.\n       * @param disable {boolean} Set to true to disable following redirects automatically\n       * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure\n       */\n    function (disable) {\n        return;\n    };\n    /**\n     * Make a POST request\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    /**\n       * Make a POST request\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.post = /**\n       * Make a POST request\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    function (url, body, headers) {\n        return;\n    };\n    /**\n     * Make a GET request\n     * @param url {string} The url to send the request to\n     * @param parameters {Object} Parameters to send with the request\n     * @param headers {Object} The headers to set for this request\n     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    /**\n       * Make a GET request\n       * @param url {string} The url to send the request to\n       * @param parameters {Object} Parameters to send with the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.get = /**\n       * Make a GET request\n       * @param url {string} The url to send the request to\n       * @param parameters {Object} Parameters to send with the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    function (url, parameters, headers) {\n        return;\n    };\n    /**\n     * Make a PUT request\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    /**\n       * Make a PUT request\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.put = /**\n       * Make a PUT request\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    function (url, body, headers) {\n        return;\n    };\n    /**\n     * Make a PATCH request\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    /**\n       * Make a PATCH request\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.patch = /**\n       * Make a PATCH request\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    function (url, body, headers) {\n        return;\n    };\n    /**\n     * Make a DELETE request\n     * @param url {string} The url to send the request to\n     * @param parameters {Object} Parameters to send with the request\n     * @param headers {Object} The headers to set for this request\n     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    /**\n       * Make a DELETE request\n       * @param url {string} The url to send the request to\n       * @param parameters {Object} Parameters to send with the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.delete = /**\n       * Make a DELETE request\n       * @param url {string} The url to send the request to\n       * @param parameters {Object} Parameters to send with the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    function (url, parameters, headers) {\n        return;\n    };\n    /**\n     * Make a HEAD request\n     * @param url {string} The url to send the request to\n     * @param parameters {Object} Parameters to send with the request\n     * @param headers {Object} The headers to set for this request\n     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    /**\n       * Make a HEAD request\n       * @param url {string} The url to send the request to\n       * @param parameters {Object} Parameters to send with the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.head = /**\n       * Make a HEAD request\n       * @param url {string} The url to send the request to\n       * @param parameters {Object} Parameters to send with the request\n       * @param headers {Object} The headers to set for this request\n       * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n       */\n    function (url, parameters, headers) {\n        return;\n    };\n    /**\n     *\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @param filePath {string} The local path of the file to upload\n     * @param name {string} The name of the parameter to pass the file along as\n     * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n     */\n    /**\n       *\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @param filePath {string} The local path of the file to upload\n       * @param name {string} The name of the parameter to pass the file along as\n       * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.uploadFile = /**\n       *\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @param filePath {string} The local path of the file to upload\n       * @param name {string} The name of the parameter to pass the file along as\n       * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n       */\n    function (url, body, headers, filePath, name) {\n        return;\n    };\n    /**\n     *\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @param filePath {string} The path to download the file to, including the file name.\n     * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n     */\n    /**\n       *\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @param filePath {string} The path to download the file to, including the file name.\n       * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n       */\n    HTTP.prototype.downloadFile = /**\n       *\n       * @param url {string} The url to send the request to\n       * @param body {Object} The body of the request\n       * @param headers {Object} The headers to set for this request\n       * @param filePath {string} The path to download the file to, including the file name.\n       * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n       */\n    function (url, body, headers, filePath) {\n        return;\n    };\n    HTTP.decorators = [\n        { type: Injectable },\n    ];\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, String]),\n        __metadata(\"design:returntype\", Object)\n    ], HTTP.prototype, \"getBasicAuthHeader\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, String]),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"useBasicAuth\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", String)\n    ], HTTP.prototype, \"getHeaders\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, String, String]),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"setHeader\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], HTTP.prototype, \"getDataSerializer\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"setDataSerializer\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, String]),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"setCookie\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"clearCookies\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Function]),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"removeCookies\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", String)\n    ], HTTP.prototype, \"getCookieString\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], HTTP.prototype, \"getRequestTimeout\", null);\n    __decorate([\n        Cordova({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], HTTP.prototype, \"setRequestTimeout\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"setSSLCertMode\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"disableRedirect\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"post\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"get\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"put\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"patch\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"delete\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"head\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object, String, String]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"uploadFile\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Object, String]),\n        __metadata(\"design:returntype\", Promise)\n    ], HTTP.prototype, \"downloadFile\", null);\n    /**\n     * @name HTTP\n     * @description\n     * Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.\n     *\n     * Advantages over Javascript requests:\n     * - Background threading - all requests are done in a background thread\n     * - SSL Pinning\n     *\n     * @usage\n     * ```typescript\n     * import { HTTP } from '@ionic-native/http';\n     *\n     * constructor(private http: HTTP) {}\n     *\n     * ...\n     *\n     * this.http.get('http://ionic.io', {}, {})\n     *   .then(data => {\n     *\n     *     console.log(data.status);\n     *     console.log(data.data); // data received by server\n     *     console.log(data.headers);\n     *\n     *   })\n     *   .catch(error => {\n     *\n     *     console.log(error.status);\n     *     console.log(error.error); // error message as string\n     *     console.log(error.headers);\n     *\n     *   });\n     *\n     * ```\n     * @interfaces\n     * HTTPResponse\n     */\n    HTTP = __decorate([\n        Plugin({\n            pluginName: 'HTTP',\n            plugin: 'cordova-plugin-advanced-http',\n            pluginRef: 'cordova.plugin.http',\n            repo: 'https://github.com/silkimen/cordova-plugin-advanced-http',\n            platforms: ['Android', 'iOS']\n        })\n    ], HTTP);\n    return HTTP;\n}(IonicNativePlugin));\nexport { HTTP };\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic-native/http/index.js\n// module id = 344\n// module chunks = 0","import { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IonicPage, NavController, ToastController } from 'ionic-angular';\nimport { HTTP } from '@ionic-native/http';\n\nimport { User } from '../../providers';\nimport { MainPage } from '../';\n\nconst URL = \"3.209.92.60:9999\"\n\n@IonicPage()\n@Component({\n  selector: 'page-signup',\n  templateUrl: 'signup.html'\n})\nexport class SignupPage {\n  // The account fields for the login form.\n  // If you're using the username field with or without email, make\n  // sure to add it to the type\n\n  private firstname: string;\n  private lastname: string;\n  private password: string;\n  private cpassword: string;\n  private email: string;\n  private contact: string;\n  private address: string;\n\n\n\n  // Our translated text strings\n  private signupErrorString: string;\n\n  constructor(public navCtrl: NavController,\n    public user: User,\n    public toastCtrl: ToastController,\n    public translateService: TranslateService, public http: HTTP) {\n  }\n\n  doSignup() {\n    console.log('Do sign');\n\n    if (this.password == this.cpassword) {\n      var dataPay =\n        {\n          \"user_firstName\": this.firstname,\n          \"user_lastName\": this.lastname,\n          \"user_password\": this.password,\n          \"user_email\": this.email,\n          \"user_contact\": this.contact\n        }\n      this.http.get(URL + '/addUsers', dataPay, {})\n        .then(data => {\n\n          console.log(data.status);\n          console.log(data.data); // data received by server\n          console.log(data.headers);\n\n        })\n        .catch(error => {\n\n          console.log(error.status);\n          console.log(error.error); // error message as string\n          console.log(error.headers);\n\n        });\n    }\n    /*  // Attempt to login in through our User service\n    this.user.signup(this.account).subscribe((resp) => {\n      this.navCtrl.push(MainPage);\n    }, (err) => {\n \n      this.navCtrl.push(MainPage);\n \n      // Unable to sign up\n      let toast = this.toastCtrl.create({\n        message: this.signupErrorString,\n        duration: 3000,\n        position: 'top'\n      });\n      toast.present();\n    });*/\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.ts"],"sourceRoot":""}